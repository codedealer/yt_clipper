name: yt_clipper

on:
  push:
    branches:
      - release
      - release/*
      - test-ci

# Workflow env variables not yet available at job level
# See https://github.community/t/how-to-set-and-access-a-workflow-variable/17335/14
env:
  NAME: yt_clipper
  VERSION: 3.7.0-beta.3.9.0-alpha.10

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      FULL_NAME: yt_clipper_${{matrix.shortos}}_3.7.0-beta.3.9.0-alpha.10
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7.x]
        node-version: [12.x]
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            shortos: win
          - os: macos-latest
            shortos: mac

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm run bundle:prod --if-present

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install clipper python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pyinstaller
          pip install -r ./src/clipper/requirements.txt

      # - name: Lint with flake8
      #   run: |
      #     pip install flake8
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Generate executable
        run: npm run build:py

      - name: Set up artifacts dir
        shell: bash
        run: |
          mkdir -p ./artifact/py/${{env.FULL_NAME}}/{webms,bin}/
          mkdir -p ./artifact/js/${{env.FULL_NAME}}/

      - name: Copy artifacts
        shell: bash
        run: |
          cp ./bindeps/${{matrix.shortos}}/ffmpeg/* ./artifact/py/${{env.FULL_NAME}}/bin/
          cp ./src/clipper/${{matrix.shortos}}_helpers/* ./artifact/py/${{env.FULL_NAME}}/
          cp ./dist/py/yt_clipper* ./artifact/py/${{env.FULL_NAME}}/
          cp ./dist/js/yt_clipper.js ./artifact/py/${{env.FULL_NAME}}/

      - name: Zip artifacts on windows
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive ./artifact/py/${{env.FULL_NAME}}/ ./artifact/py/${{env.FULL_NAME}}.zip

      - name: Zip artifacts on non-windows systems
        if: matrix.os != 'windows-latest'
        run: |
          zip -r ./artifact/py/${{env.FULL_NAME}}.zip ./artifact/py/${{env.FULL_NAME}}/ 

      - name: Upload clipper script installation artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{env.FULL_NAME}}.zip
          path: ./artifact/py/${{env.FULL_NAME}}.zip

  release:
    needs: build
    runs-on: macos-latest
    env:
      FULL_NAME_WIN: yt_clipper_win_3.7.0-beta.3.9.0-alpha.10
      FULL_NAME_MAC: yt_clipper_mac_3.7.0-beta.3.9.0-alpha.10

    steps:

    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y.%m.%d')"

    - uses: actions/download-artifact@v2
      with:
        name:  ${{env.FULL_NAME_WIN}}.zip

    - uses: actions/download-artifact@v2
      with:
        name:  ${{env.FULL_NAME_MAC}}.zip

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: v${{env.VERSION}}
        release_name: ${{env.NAME}} v${{env.VERSION}} [${{steps.date.outputs.date}}] 
        draft: true
        prerelease: false

    - name: Upload release asset (win)
      id: upload-release-asset-win
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ${{env.FULL_NAME_WIN}}.zip
        asset_name: ${{env.FULL_NAME_WIN}}.zip
        asset_content_type: application/zip

    - name: Upload release asset (mac)
      id: upload-release-asset-mac 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ${{env.FULL_NAME_MAC}}.zip
        asset_name: ${{env.FULL_NAME_MAC}}.zip
        asset_content_type: application/zip
