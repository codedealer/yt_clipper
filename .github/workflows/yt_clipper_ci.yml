name: yt_clipper

on:
  push:
    branches:
      - release
      - release/*
      - test-ci

env:
  NAME: nv_clipper
  VERSION: '5.32.0'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set derived environment variables
        shell: bash
        run: |
          echo "WIN_ARTIFACT_NAME=${NAME}_win_${VERSION}" >> $GITHUB_ENV
          echo "JS_ARTIFACT_NAME=${NAME}_${VERSION}.js" >> $GITHUB_ENV

      - name: Debug environment variables
        shell: bash
        run: |
          echo "NAME: $NAME"
          echo "VERSION: $VERSION"
          echo "WIN_ARTIFACT_NAME: $WIN_ARTIFACT_NAME"
          echo "JS_ARTIFACT_NAME: $JS_ARTIFACT_NAME"

      - name: Setup directories
        shell: bash
        run: |
          mkdir -p ./artifact/py/${NAME}_win_${VERSION}/{webms,bin,temp}/

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: pip

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -e .

      - name: Set up FFmpeg
        shell: bash
        run: |
          curl -L https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n6.0-latest-win64-lgpl-6.0.zip -o ffmpeg.zip
          7z x ffmpeg.zip -o./bindeps/ffmpeg
          mv ./bindeps/ffmpeg/ffmpeg-n6.0-latest-win64-lgpl-6.0/* ./bindeps/ffmpeg/
          rm -rf ./bindeps/ffmpeg/ffmpeg-n6.0-latest-win64-lgpl-6.0

      - name: Set up yt-dlp
        shell: bash
        run: |
          mkdir -p ./bindeps/yt-dlp/bin
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o ./bindeps/yt-dlp/bin/yt-dlp.exe

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Build js
        run: |
          cd src/markup
          npm ci
          npm run build

      - name: Create executable
        shell: bash
        run: |
          pyinstaller -F src/clipper/yt_clipper.py --distpath dist/py --clean --name yt_clipper

      - name: Copy artifacts
        shell: bash
        run: |
          mv ./bindeps/ffmpeg/bin/* ./artifact/py/${NAME}_win_${VERSION}/bin/
          mv ./bindeps/ffmpeg/*.txt ./artifact/py/${NAME}_win_${VERSION}/bin/
          mv ./bindeps/yt-dlp/bin/* ./artifact/py/${NAME}_win_${VERSION}/bin/

          cp ./src/clipper/include/* ./artifact/py/${NAME}_win_${VERSION}/
          cp ./src/clipper/win_helpers/* ./artifact/py/${NAME}_win_${VERSION}/
          mkdir -p ./artifact/py/${NAME}_win_${VERSION}/yt-dlp-plugins/ytc
          cp -R ./src/clipper/yt-dlp-plugins/ytc/ ./artifact/py/${NAME}_win_${VERSION}/yt-dlp-plugins/
          cp ./dist/py/yt_clipper* ./artifact/py/${NAME}_win_${VERSION}/

      - name: Zip artifacts on windows
        shell: pwsh
        run: |
          Compress-Archive ./artifact/py/${NAME}_win_${VERSION}/ ./artifact/py/${NAME}_win_${VERSION}.zip

      - name: Upload clipper script installation artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME }}_win_${{ env.VERSION }}
          path: ./artifact/py/${{ env.NAME }}_win_${{ env.VERSION }}.zip

      - name: Upload markup script installation artifact
        uses: actions/upload-artifact@v4e
        with:
          name: ${{ env.NAME }}_${{ env.VERSION }}.js
          path: ./dist/js/yt_clipper.js

  release:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Set derived environment variables
        shell: bash
        run: |
          echo "WIN_ARTIFACT_NAME=${NAME}_win_${VERSION}" >> $GITHUB_ENV
          echo "JS_ARTIFACT_NAME=${NAME}_${VERSION}.js" >> $GITHUB_ENV

      - name: Debug environment variables
        shell: bash
        run: |
          echo "NAME: $NAME"
          echo "VERSION: $VERSION"
          echo "WIN_ARTIFACT_NAME: $WIN_ARTIFACT_NAME"
          echo "JS_ARTIFACT_NAME: $JS_ARTIFACT_NAME"

      - name: Set date for release
        id: set_env
        shell: bash
        run: |
          echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.NAME }}_win_${{ env.VERSION }}
          path: ./

      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.NAME }}_${{ env.VERSION }}.js
          path: ./

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: ${{ env.NAME }} v${{ env.VERSION }} [${{ steps.set_env.outputs.date }}]
          draft: true
          prerelease: false

      - name: Upload release asset (win)
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.NAME }}_win_${{ env.VERSION }}.zip
          asset_name: ${{ env.NAME }}_win_${{ env.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload release asset (markup)
        id: upload-release-asset-markup
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.NAME }}_${{ env.VERSION }}.js
          asset_name: ${{ env.NAME }}_${{ env.VERSION }}.js
          asset_content_type: text/javascript
